To start the server

Install the node packages
npm Install

Start the server
node server.js

Server is set to port 5001

_________________________________

Stateless Functional Component
When a Component only holds a render method and does not keep a track of the state, we can simply create a function,
with props as an argument and return the JSX

_________________________________

State of a Component

A property for a Component is received by its parent and is immutable
Whereas a state of the Component holds the data that could be changed,
Usually by a user input

We can create a state for the Component just by creating an object with the name state

These states could be accessed in that Component by using this.state

The initial state of the Component must never be taken from the props
props are set only when the Component is rendered
If the Component is not refreshed, the Component's state may not be updated

_________________________________

setState()

In order to change the state of the Component we cannot directly change the value,
since React will not know about the change in state.
Hence, setState is used to rerender the component in case of changed state.

setState() could take either of 2 parameters
1. Functional setState takes in a function where the argument is the previous state and that state is altered
2. Object -> It takes in an Object and that object is merged with the state

_________________________________

Controlled Component

Controlled components refer to components that render a form, but the "source of truth" for that form state lives inside of the component state rather than inside of the DOM. The benefits of Controlled Components are:

    instant input validation
    conditionally disable/enable buttons
    enforce input formats

In our ListContacts component, not only does the component render a form,
but it also controls what happens in that form based on user input. 
In this case, event handlers update the component's state with the user's search query. 
And as we've learned: any changes to React state will cause a re-render on the page, 
effectively displaying our live search results.

_________________________________

Lifecycle Events

Lifecycle events are specially named methods in a component. 
These methods are automatically bound to the component instance, 
and React will call these methods naturally at certain times during the life of a component. 
There are a number of different lifecycle events, but here are the most commonly used ones.

    componentDidMount()

        invoked immediately after the component is inserted into the DOM

    componentWillUnmount()

        invoked immediately before a component is removed from the DOM

    getDerivedStateFromProps()

        invoked after a component is instantiated as well as when it receives brand new props

To use one of these, you'd just create a method in your component with the name and React will call it. 
It's an easy way to hook into different parts of the lifecycle of React components.